/*
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// StorageAccountUpdateParameters : The storage account update parameters.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageAccountUpdateParameters {
    /// The current active storage account key name.
    #[serde(rename = "activeKeyName", skip_serializing_if = "Option::is_none")]
    pub active_key_name: Option<String>,
    /// whether keyvault should manage the storage account for the user.
    #[serde(rename = "autoRegenerateKey", skip_serializing_if = "Option::is_none")]
    pub auto_regenerate_key: Option<bool>,
    /// The key regeneration time duration specified in ISO-8601 format.
    #[serde(rename = "regenerationPeriod", skip_serializing_if = "Option::is_none")]
    pub regeneration_period: Option<String>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Box<crate::models::StorageAccountAttributes>>,
    /// Application specific metadata in the form of key-value pairs.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<::std::collections::HashMap<String, String>>,
}

impl StorageAccountUpdateParameters {
    /// The storage account update parameters.
    pub fn new() -> StorageAccountUpdateParameters {
        StorageAccountUpdateParameters {
            active_key_name: None,
            auto_regenerate_key: None,
            regeneration_period: None,
            attributes: None,
            tags: None,
        }
    }
}


