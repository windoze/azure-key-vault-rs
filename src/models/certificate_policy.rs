/*
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CertificatePolicy : Management policy for a certificate.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CertificatePolicy {
    /// The certificate id.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "key_props", skip_serializing_if = "Option::is_none")]
    pub key_props: Option<Box<crate::models::KeyProperties>>,
    #[serde(rename = "secret_props", skip_serializing_if = "Option::is_none")]
    pub secret_props: Option<Box<crate::models::SecretProperties>>,
    #[serde(rename = "x509_props", skip_serializing_if = "Option::is_none")]
    pub x509_props: Option<Box<crate::models::X509CertificateProperties>>,
    /// Actions that will be performed by Key Vault over the lifetime of a certificate.
    #[serde(rename = "lifetime_actions", skip_serializing_if = "Option::is_none")]
    pub lifetime_actions: Option<Vec<crate::models::LifetimeAction>>,
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<Box<crate::models::IssuerParameters>>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Box<crate::models::CertificateAttributes>>,
}

impl CertificatePolicy {
    /// Management policy for a certificate.
    pub fn new() -> CertificatePolicy {
        CertificatePolicy {
            id: None,
            key_props: None,
            secret_props: None,
            x509_props: None,
            lifetime_actions: None,
            issuer: None,
            attributes: None,
        }
    }
}


