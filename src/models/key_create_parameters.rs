/*
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// KeyCreateParameters : The key create parameters.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyCreateParameters {
    /// The type of key to create. For valid values, see JsonWebKeyType.
    #[serde(rename = "kty")]
    pub kty: Kty,
    /// The key size in bits. For example: 2048, 3072, or 4096 for RSA.
    #[serde(rename = "key_size", skip_serializing_if = "Option::is_none")]
    pub key_size: Option<i32>,
    /// The public exponent for a RSA key.
    #[serde(rename = "public_exponent", skip_serializing_if = "Option::is_none")]
    pub public_exponent: Option<i32>,
    #[serde(rename = "key_ops", skip_serializing_if = "Option::is_none")]
    pub key_ops: Option<Vec<KeyOps>>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Box<crate::models::KeyAttributes>>,
    /// Application specific metadata in the form of key-value pairs.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<::std::collections::HashMap<String, String>>,
    /// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
    #[serde(rename = "crv", skip_serializing_if = "Option::is_none")]
    pub crv: Option<Crv>,
}

impl KeyCreateParameters {
    /// The key create parameters.
    pub fn new(kty: Kty) -> KeyCreateParameters {
        KeyCreateParameters {
            kty,
            key_size: None,
            public_exponent: None,
            key_ops: None,
            attributes: None,
            tags: None,
            crv: None,
        }
    }
}

/// The type of key to create. For valid values, see JsonWebKeyType.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kty {
    #[serde(rename = "EC")]
    EC,
    #[serde(rename = "EC-HSM")]
    ECHSM,
    #[serde(rename = "RSA")]
    RSA,
    #[serde(rename = "RSA-HSM")]
    RSAHSM,
    #[serde(rename = "oct")]
    Oct,
    #[serde(rename = "oct-HSM")]
    OctHSM,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KeyOps {
    #[serde(rename = "encrypt")]
    Encrypt,
    #[serde(rename = "decrypt")]
    Decrypt,
    #[serde(rename = "sign")]
    Sign,
    #[serde(rename = "verify")]
    Verify,
    #[serde(rename = "wrapKey")]
    WrapKey,
    #[serde(rename = "unwrapKey")]
    UnwrapKey,
    #[serde(rename = "import")]
    Import,
}
/// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Crv {
    #[serde(rename = "P-256")]
    _256,
    #[serde(rename = "P-384")]
    _384,
    #[serde(rename = "P-521")]
    _521,
    #[serde(rename = "P-256K")]
    _256K,
}

