/*
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.2
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecurityDomainJsonWebKey {
    /// Key identifier.
    #[serde(rename = "kid")]
    pub kid: String,
    /// JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. For Security Domain this value must be RSA.
    #[serde(rename = "kty")]
    pub kty: String,
    #[serde(rename = "key_ops")]
    pub key_ops: Vec<String>,
    /// RSA modulus.
    #[serde(rename = "n")]
    pub n: String,
    /// RSA public exponent.
    #[serde(rename = "e")]
    pub e: String,
    /// X509 certificate chain parameter
    #[serde(rename = "x5c")]
    pub x5c: Vec<String>,
    /// Public Key Use Parameter. This is optional and if present must be enc.
    #[serde(rename = "use", skip_serializing_if = "Option::is_none")]
    pub _use: Option<String>,
    /// X509 certificate SHA1 thumbprint. This is optional.
    #[serde(rename = "x5t", skip_serializing_if = "Option::is_none")]
    pub x5t: Option<String>,
    /// X509 certificate SHA256 thumbprint.
    #[serde(rename = "x5t#S256")]
    pub x5t_s256: String,
    /// Algorithm intended for use with the key.
    #[serde(rename = "alg")]
    pub alg: String,
}

impl SecurityDomainJsonWebKey {
    pub fn new(kid: String, kty: String, key_ops: Vec<String>, n: String, e: String, x5c: Vec<String>, x5t_s256: String, alg: String) -> SecurityDomainJsonWebKey {
        SecurityDomainJsonWebKey {
            kid,
            kty,
            key_ops,
            n,
            e,
            x5c,
            _use: None,
            x5t: None,
            x5t_s256,
            alg,
        }
    }
}


