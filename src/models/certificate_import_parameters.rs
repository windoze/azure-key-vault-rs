/*
 * KeyVaultClient
 *
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CertificateImportParameters : The certificate import parameters.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CertificateImportParameters {
    /// Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
    #[serde(rename = "value")]
    pub value: String,
    /// If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
    #[serde(rename = "pwd", skip_serializing_if = "Option::is_none")]
    pub pwd: Option<String>,
    #[serde(rename = "policy", skip_serializing_if = "Option::is_none")]
    pub policy: Option<Box<crate::models::CertificatePolicy>>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Box<crate::models::CertificateAttributes>>,
    /// Application specific metadata in the form of key-value pairs.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<::std::collections::HashMap<String, String>>,
}

impl CertificateImportParameters {
    /// The certificate import parameters.
    pub fn new(value: String) -> CertificateImportParameters {
        CertificateImportParameters {
            value,
            pwd: None,
            policy: None,
            attributes: None,
            tags: None,
        }
    }
}


